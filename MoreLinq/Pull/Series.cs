using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace MoreLinq.Pull
{
    /// <summary>
    /// Sequence generation.
    /// </summary>
    public static class Series
    {
        /// <summary>
        /// Returns a series of values consecutively generated by a generator function.
        /// </summary>
        /// <typeparam name="TResult">Type of elements to generate.</typeparam>
        /// <param name="initial">Value of first element in sequence</param>
        /// <param name="generateNext">
        /// Generator function which takes the previous series element and uses it to generate the next element.
        /// </param>
        /// <remarks>
        /// This function defers element generation until needed and streams the results.
        /// </remarks>
        /// <example>
        /// <code>
        /// IEnumerable&lt;int&gt; result = SeriesComprehension.Series(2, n => n * n).Take(6);
        /// </code>
        /// The <c>result</c> variable, when iterated over, will yield 2, 4, 8, 16, 32, and 64, in turn.
        /// </example>
        public static IEnumerable<TResult> Expand<TResult>(TResult initial, Func<TResult, TResult> generateNext)
        {
            generateNext.ThrowIfNull("first");
            return ExpandImpl(initial, generateNext);
        }

        private static IEnumerable<TResult> ExpandImpl<TResult>(TResult initial, Func<TResult, TResult> generator) 
        {
            Debug.Assert(generator != null);

            for (var current = initial; ; current = generator(current))
                yield return current;
        }
    }
}
