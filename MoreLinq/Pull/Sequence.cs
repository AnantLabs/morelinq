using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace MoreLinq.Pull
{
    /// <summary>
    /// Static non-extension methods, mostly for generation.
    /// </summary>
    public static class Sequence
    {
        /// <summary>
        /// Returns a sequence of values consecutively generated by a generator function.
        /// </summary>
        /// <typeparam name="TResult">Type of elements to generate.</typeparam>
        /// <param name="initial">Value of first element in sequence</param>
        /// <param name="generator">
        /// Generator function which takes the previous series element and uses it to generate the next element.
        /// </param>
        /// <remarks>
        /// This function defers element generation until needed and streams the results.
        /// </remarks>
        /// <example>
        /// <code>
        /// IEnumerable&lt;int&gt; result = Sequence.Generate(2, n => n * n).Take(6);
        /// </code>
        /// The <c>result</c> variable, when iterated over, will yield 2, 4, 8, 16, 32, and 64, in turn.
        /// </example>        
        public static IEnumerable<TResult> Generate<TResult>(TResult initial, Func<TResult, TResult> generator)
        {
            generator.ThrowIfNull("generator");
            return GenerateImpl(initial, generator);
        }

        private static IEnumerable<TResult> GenerateImpl<TResult>(TResult initial, Func<TResult, TResult> generator) 
        {
            Debug.Assert(generator != null);

            for (var current = initial; ; current = generator(current))
                yield return current;
        }

        /// <summary>
        /// Returns a sequence of values based on indexes.
        /// </summary>
        /// <remarks>
        /// The sequence is (practically) infinite
        /// - the index ranges from 0 to <c>int.MaxValue</c> inclusive. This function defers
        /// execution and streams the results.
        /// </remarks>
        /// <typeparam name="TResult">Type of result to generate</typeparam>
        /// <param name="generator">Generation function to apply to each index</param>
        /// <returns>A sequence </returns>
        public static IEnumerable<TResult> GenerateByIndex<TResult>(Func<int, TResult> generator)
        {
            // Would just use Enumerable.Range(0, int.MaxValue).Select(generator) but that doesn't
            // include int.MaxValue. Picky, I know...
            generator.ThrowIfNull("generator");
            return GenerateByIndexImpl(generator);
        }

        private static IEnumerable<TResult> GenerateByIndexImpl<TResult>(Func<int, TResult> generator)
        {
            // Simplest way to get 0 to int.MaxValue inclusive due to overflow.
            for (int i = 0; i >= 0; i++)
            {
                yield return generator(i);
            }
        }
    }
}
